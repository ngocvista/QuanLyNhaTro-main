// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotelManagement.Data.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(MotelManagementContext))]
    partial class MotelManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MotelManagement.Data.Models.ArticleRoom", b =>
                {
                    b.Property<int>("Articleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Articleid"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageArticle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("header")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Articleid");

                    b.ToTable("ArticleRoom", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"), 1L, 1);

                    b.Property<DateTime?>("AcceptTime")
                        .HasColumnType("datetime");

                    b.Property<string>("BankingImage")
                        .HasColumnType("text");

                    b.Property<int>("BillState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Debt")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("ElectricBill")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PaidTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("RoomBill")
                        .HasColumnType("money");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceBill")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("WaterBill")
                        .HasColumnType("money");

                    b.HasKey("BillId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"), 1L, 1);

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContractId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FeatureId");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("ImageId");

                    b.HasIndex("RoomId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Receiver")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeSend")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MessageId");

                    b.HasIndex("Receiver");

                    b.HasIndex("RoomId");

                    b.HasIndex("Sender");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Passing", b =>
                {
                    b.Property<int>("PassingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassingId"), 1L, 1);

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserRequestId")
                        .HasColumnType("int");

                    b.HasKey("PassingId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserRequestId");

                    b.ToTable("Passing", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoleFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFeature", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxPerson")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RoomTypeID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomType", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Bill", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Bills")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Bill_Room");

                    b.HasOne("MotelManagement.Data.Models.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Bill_User");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Booking", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Room");

                    b.HasOne("MotelManagement.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_User");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Contract", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Contracts")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Contract_Room");

                    b.HasOne("MotelManagement.Data.Models.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Contract_User");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Image", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Image_Room");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Message", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.User", "ReceiverNavigation")
                        .WithMany("MessageReceiverNavigations")
                        .HasForeignKey("Receiver")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User1");

                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Room");

                    b.HasOne("MotelManagement.Data.Models.User", "SenderNavigation")
                        .WithMany("MessageSenderNavigations")
                        .HasForeignKey("Sender")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User");

                    b.Navigation("ReceiverNavigation");

                    b.Navigation("Room");

                    b.Navigation("SenderNavigation");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Passing", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.User", "Member")
                        .WithMany("PassingMembers")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Passing_User");

                    b.HasOne("MotelManagement.Data.Models.Room", "Room")
                        .WithMany("Passings")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Passing_Room");

                    b.HasOne("MotelManagement.Data.Models.User", "UserRequest")
                        .WithMany("PassingUserRequests")
                        .HasForeignKey("UserRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_Passing_User1");

                    b.Navigation("Member");

                    b.Navigation("Room");

                    b.Navigation("UserRequest");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoleFeature", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Feature", "Feature")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("FeatureId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Feature");

                    b.HasOne("MotelManagement.Data.Models.Role", "Role")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Role");

                    b.Navigation("Feature");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoleUser", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleUser_Role");

                    b.HasOne("MotelManagement.Data.Models.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleUser_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Room", b =>
                {
                    b.HasOne("MotelManagement.Data.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_RoomType");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Feature", b =>
                {
                    b.Navigation("RoleFeatures");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Role", b =>
                {
                    b.Navigation("RoleFeatures");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.Room", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Bookings");

                    b.Navigation("Contracts");

                    b.Navigation("Images");

                    b.Navigation("Messages");

                    b.Navigation("Passings");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MotelManagement.Data.Models.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Bookings");

                    b.Navigation("Contracts");

                    b.Navigation("MessageReceiverNavigations");

                    b.Navigation("MessageSenderNavigations");

                    b.Navigation("PassingMembers");

                    b.Navigation("PassingUserRequests");

                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
